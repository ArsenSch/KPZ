import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from binance import Client
from dataclasses import dataclass
from datetime import datetime
from enum import Enum

class TradeStatus(Enum):
    OPEN = "OPEN"
    CLOSED = "CLOSED"
    STOP_LOSS = "STOP_LOSS"
    TAKE_PROFIT = "TAKE_PROFIT"

@dataclass
class Trade:
    entry_time: datetime
    entry_price: float
    exit_time: datetime = None
    exit_price: float = None
    status: TradeStatus = TradeStatus.OPEN
    pnl: float = 0.0
    amount: float = 0.0

class Backtester:
    def __init__(self, initial_amount=1000, take_profit=0.05, stop_loss=0.03):
        self.client = Client()
        self.initial_amount = initial_amount
        self.current_balance = initial_amount
        self.take_profit = take_profit
        self.stop_loss = stop_loss
        self.trades = []
        self.balance_history = []
        
    def load_data(self, asset: str, interval: str, days: int):
        end_time = datetime.now()
        start_time = end_time - timedelta(days=days)
        
        klines = self.client.get_historical_klines(
            asset,
            interval,
            start_time.strftime("%Y-%m-%d"),
            end_time.strftime("%Y-%m-%d")
        )
        
        self.data = pd.DataFrame(klines, columns=[
            'time', 'open', 'high', 'low', 'close', 'volume',
            'close_time', 'quote_asset_volume', 'trades',
            'taker_buy_base', 'taker_buy_quote', 'ignore'
        ])
        self.data['time'] = pd.to_datetime(self.data['time'], unit='ms')
        self.data['close'] = self.data['close'].astype(float)
        
    def calculate_indicators(self):
        self.data['SMA_50'] = self.data['close'].rolling(50).mean()
        self.data['SMA_200'] = self.data['close'].rolling(200).mean()
        
        delta = self.data['close'].diff()
        gain = delta.where(delta > 0, 0).rolling(14).mean()
        loss = -delta.where(delta < 0, 0).rolling(14).mean()
        rs = gain / loss
        self.data['RSI'] = 100 - (100 / (1 + rs))
        
    def run_backtest(self):
        self.balance_history.append(self.current_balance)
        
        for i in range(200, len(self.data)):
            current = self.data.iloc[i]
            last_50 = self.data.iloc[i-50:i]
            
            # Check entry conditions
            if (current['close'] > current['SMA_50'] and 
                current['SMA_50'] > current['SMA_200'] and 
                current['RSI'] < 70):
                
                trade_amount = self.current_balance * 0.1  # 10% of balance
                if trade_amount < 10:  # Minimum trade amount
                    continue
                    
                entry_price = current['close']
                take_profit = entry_price * (1 + self.take_profit)
                stop_loss = entry_price * (1 - self.stop_loss)
                
                trade = Trade(
                    entry_time=current['time'],
                    entry_price=entry_price,
                    amount=trade_amount,
                )
                self.trades.append(trade)
                self.current_balance -= trade_amount
                
            # Check exit conditions for open trades
            for trade in [t for t in self.trades if t.status == TradeStatus.OPEN]:
                if current['low'] <= trade.entry_price * (1 - self.stop_loss):
                    trade.exit_price = trade.entry_price * (1 - self.stop_loss)
                    trade.status = TradeStatus.STOP_LOSS
                    trade.pnl = -trade.amount * self.stop_loss
                    self.current_balance += trade.amount + trade.pnl
                    
                elif current['high'] >= trade.entry_price * (1 + self.take_profit):
                    trade.exit_price = trade.entry_price * (1 + self.take_profit)
                    trade.status = TradeStatus.TAKE_PROFIT
                    trade.pnl = trade.amount * self.take_profit
                    self.current_balance += trade.amount + trade.pnl
                    
                trade.exit_time = current['time']
            
            self.balance_history.append(self.current_balance)
    
    def show_results(self):
        plt.figure(figsize=(12, 6))
        plt.plot(self.balance_history)
        plt.title("Balance History")
        plt.xlabel("Trade")
        plt.ylabel("Balance")
        plt.grid()
        plt.show()
        
        total_trades = len(self.trades)
        winning_trades = len([t for t in self.trades if t.pnl > 0])
        win_rate = winning_trades / total_trades if total_trades > 0 else 0
        total_profit = sum(t.pnl for t in self.trades)
        
        print("\n=== Backtest Results ===")
        print(f"Initial Balance: {self.initial_amount:.2f}")
        print(f"Final Balance: {self.current_balance:.2f}")
        print(f"Total Trades: {total_trades}")
        print(f"Winning Trades: {winning_trades} ({win_rate:.1%})")
        print(f"Total Profit: {total_profit:.2f}")
        print(f"Profit Factor: {self.calculate_profit_factor()}")

    def calculate_profit_factor(self):
        gross_profit = sum(t.pnl for t in self.trades if t.pnl > 0)
        gross_loss = abs(sum(t.pnl for t in self.trades if t.pnl < 0))
        return gross_profit / gross_loss if gross_loss > 0 else float('inf')

# UML Diagram using Graphviz
def CCD():
    diagram = Digraph(comment='Backtester Class Diagram')
    
    # Classes
    diagram.node('Backtester', '''Backtester
    |
    |--- client: Client
    |--- initial_amount: float
    |--- current_balance: float
    |--- take_profit: float
    |--- stop_loss: float
    |--- trades: List[Trade]
    |--- balance_history: List[float]
    |
    |--- load_data()
    |--- calculate_indicators()
    |--- run_backtest()
    |--- show_results()
    |--- calculate_profit_factor()''')
    
    diagram.node('Trade', '''Trade
    |
    |--- entry_time: datetime
    |--- entry_price: float
    |--- exit_time: datetime
    |--- exit_price: float
    |--- status: TradeStatus
    |--- pnl: float
    |--- amount: float''')
    
    diagram.node('TradeStatus', '''TradeStatus(Enum)
    |
    |--- OPEN
    |--- CLOSED
    |--- STOP_LOSS
    |--- TAKE_PROFIT''')
    
    # Relationships
    diagram.edge('Backtester', 'Trade', 'contains')
    diagram.edge('Trade', 'TradeStatus', 'uses')
    
    diagram.render('backtester_class_diagram', format='png', view=True)

# Usage example
if __name__ == "__main__":
    backtester = Backtester(initial_amount=10000)
    backtester.load_data("BTCUSDT", Client.KLINE_INTERVAL_1HOUR, 365)
    backtester.calculate_indicators()
    backtester.run_backtest()
    backtester.show_results()
    
    CCD()
